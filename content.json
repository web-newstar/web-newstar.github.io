{"meta":{"title":"我的眼里都是你哦","subtitle":null,"description":null,"author":"雷涛","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"我总结的git指令","slug":"我总结的git指令","date":"2018-01-10T06:32:28.000Z","updated":"2018-01-11T02:19:10.820Z","comments":true,"path":"2018/01/10/我总结的git指令/","link":"","permalink":"http://yoursite.com/2018/01/10/我总结的git指令/","excerpt":"","text":"这里是git官网，可进入下载.我一直用GitHub作为免费的远程仓库，如果是个人的开源项目，放到GitHub上是完全没有问题的。其实GitHub还是一个开源协作社区，通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。 Quick Start创建版本库1$ git init #把目录变成Git可以管理的仓库 添加远程仓库现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份12345git initgit add README.mdgit commit -m \"first commit\"git remote add origin https://github.com/web-newstar/test.git #自己的ssh地址git push -u origin master 创建与合并分支12345678910111213141516171819git checkout -b dev #首先创建dev分支，并且切换到dev分支# git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：git branch devgit checkout dev# 然后，用git branch命令查看当前分支：git branch# 然后，我们就可以在dev分支上正常提交git add .git commit -m \"merge\"# 现在，dev分支的工作完成，我们就可以切换回master分支：git checkout master# 现在，我们把dev分支的工作成果合并到master分支上：git merge dev# git merge命令用于合并指定分支到当前分支。合并后，再查看内容，就可以看到，和dev分支的最新提交是完全一样的# 注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。# 当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。合并完成后，就可以放心地删除dev分支了：git branch -d dev# 删除后，查看branch，就只剩下master分支了：git branch More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"关于git","slug":"关于git","permalink":"http://yoursite.com/tags/关于git/"}]}]}