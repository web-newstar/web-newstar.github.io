{"meta":{"title":"我的眼里都是你哦","subtitle":null,"description":null,"author":"雷涛","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"我总结的git指令","slug":"我总结的git指令","date":"2018-01-10T06:32:28.000Z","updated":"2018-01-11T06:06:33.856Z","comments":true,"path":"2018/01/10/我总结的git指令/","link":"","permalink":"http://yoursite.com/2018/01/10/我总结的git指令/","excerpt":"","text":"这里是git官网，可进入下载.我一直用GitHub作为免费的远程仓库，如果是个人的开源项目，放到GitHub上是完全没有问题的。其实GitHub还是一个开源协作社区，通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。 Quick Start创建版本库1$ git init #把目录变成Git可以管理的仓库 添加远程仓库现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份12345git initgit add README.mdgit commit -m \"first commit\"git remote add origin https://github.com/web-newstar/test.git #自己的ssh地址git push -u origin master 创建与合并分支12345678910111213141516171819git checkout -b dev #首先创建dev分支，并且切换到dev分支# git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：git branch devgit checkout dev# 然后，用git branch命令查看当前分支：git branch# 然后，我们就可以在dev分支上正常提交git add .git commit -m \"merge\"# 现在，dev分支的工作完成，我们就可以切换回master分支：git checkout master# 现在，我们把dev分支的工作成果合并到master分支上：git merge dev# git merge命令用于合并指定分支到当前分支。合并后，再查看内容，就可以看到，和dev分支的最新提交是完全一样的# 注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。# 当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。合并完成后，就可以放心地删除dev分支了：git branch -d dev# 删除后，查看branch，就只剩下master分支了：git branch 解决冲突12345678910111213141516171819# 准备新的feature1分支，继续我们的新分支开发：git checkout -b feature1# 修改readme.txt最后一行，改为：Creating a new branch is quick AND simple# 在feature1分支上提交：git add readme.txt git commit -m \"AND simple\"# 切换到master分支：git checkout master# 在master分支上把readme.txt文件的最后一行改为：Creating a new branch is quick &amp; simple.git add readme.txt git commit -m \"&amp; simple\"# 这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：git merge feature1# Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存：Creating a new branch is quick and simple.# 再提交：git add readme.txt git commit -m \"conflict fixed\"# 最后，删除feature1分支：git branch -d feature1 分支管理策略通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。下面我们实战一下–no-ff方式的git merge：1234567891011# 首先，仍然创建并切换dev分支：git checkout -b dev# 修改readme.txt文件，并提交一个新的commit：git add readme.txt git commit -m \"add merge\"# 现在，我们切换回master：git checkout master# 准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：git merge --no-ff -m \"merge with no-ff\" dev# 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。# 合并后，我们用git log看看分支历史： 分支策略在实际开发中，我们应该按照几个基本原则进行分支管理：首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。所以，团队合作的分支看起来就像这样：","categories":[],"tags":[{"name":"关于git","slug":"关于git","permalink":"http://yoursite.com/tags/关于git/"}]}]}